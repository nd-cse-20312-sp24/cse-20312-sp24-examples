# This file was generated by ChatGPT

from dataclasses import dataclass

@dataclass
class Node:
    val: int
    left: 'Node' = None
    right: 'Node' = None

@dataclass
class Tree:
    root: Node = None
    
    def insert(self, val):
        if not self.root:
            self.root = Node(val)
        else:
            self._insert_recursive(self.root, val)
    
    def _insert_recursive(self, node, val):
        if val < node.val:
            if node.left is None:
                node.left = Node(val)
            else:
                self._insert_recursive(node.left, val)
        elif val > node.val:
            if node.right is None:
                node.right = Node(val)
            else:
                self._insert_recursive(node.right, val)
    
    def search(self, val):
        return self._search_recursive(self.root, val)
    
    def _search_recursive(self, node, val):
        if not node:
            return False
        
        if node.val == val:
            return True
        elif val < node.val:
            return self._search_recursive(node.left, val)
        else:
            return self._search_recursive(node.right, val)
    
    def __contains__(self, val):
        return self.search(val)
    
    def print_tree(self):
        self._print_inorder(self.root)
    
    def _print_inorder(self, node):
        if node:
            self._print_inorder(node.left)
            print(node.val, end=' ')
            self._print_inorder(node.right)
